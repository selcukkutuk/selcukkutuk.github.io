<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Selçuk Kütük Kişisel Blog</title>
  
  <subtitle>i don&#39;t know but i can learn</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://selcukkutuk.com/"/>
  <updated>2019-12-15T21:12:15.686Z</updated>
  <id>https://selcukkutuk.com/</id>
  
  <author>
    <name>Selçuk Kütük</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NuxtJs Uygulamanızı Github Actions ile Surge.sh’a Deploy Etme</title>
    <link href="https://selcukkutuk.com/nuxtjs-uygulamanizi-github-actions-ile-surgesh-a-deploy-etme/"/>
    <id>https://selcukkutuk.com/nuxtjs-uygulamanizi-github-actions-ile-surgesh-a-deploy-etme/</id>
    <published>2019-12-08T12:19:04.000Z</published>
    <updated>2019-12-15T21:12:15.686Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/1000/1*PL9rzQIpoQZ-tJog9CbOxg.png" alt="Giris Resmi"></p><p>Github Actions duyurulduğunda hemen kayıt oldum ve heyecanla beklemeye başladım. Hesabım için aktif olduğunda ise bir deneme fırsatı bulamadım. Bugün temel anlamda basit bir nuxtjs uygulaması nasıl deploy ediliyor diye baktım. Burada örneği nuxtjs ile yapıyor olmamın aslında hiçbir önemi bulunmuyor. Bugün nuxtjs ile bir PoC yapıyordum ve bunu Github Actions ile nasıl deploy edebilirim dedim ve başladım. O zaman adım adım ne yapıyoruz birlikte inceleyelim.</p><a id="more"></a><h2 id="Surgesh-icin-token-olusturalim"><a href="#Surgesh-icin-token-olusturalim" class="headerlink" title="Surgesh için token oluşturalım"></a><strong>Surgesh için token oluşturalım</strong></h2><p>Deploy etmek için kullanacağımız servis surge.sh olacak. Bu nedenle deploy aşamasında kullanacağımız bir token almamız gerekiyor. Tabi bu işlemi yapabilmemiz için surge cli’ı kurmamız gerekli. Bunu aşağıda yer alan komut ile gerçekleştiriyoruz.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g surge</span><br></pre></td></tr></table></figure><p>Şimdi sıra geldi token almaya. Bunu da aşağıda yer alan komut ile gerçekleştiriyoruz. Alttaki resimde doğrudan token verildiğini göreceksiniz. Eğer surge cli’ı ilk kez çalıştırıyorsanız cli sizden bir kullanıcı adı ve şifre talep edecek ve sonrasında token alabileceksiniz.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">surge token</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/605/1*W5WHnRxku1n11kay5C-OCw.png" alt="Surge.sh token alma"></p><h2 id="NuxtJs-uygulamamizi-olusturalim"><a href="#NuxtJs-uygulamamizi-olusturalim" class="headerlink" title="NuxtJs uygulamamızı oluşturalım"></a><strong>NuxtJs uygulamamızı oluşturalım</strong></h2><p>Şimdi bir nuxtjs uygulaması oluşturalım ve bunu github depomuza gönderelim.</p><blockquote><p><strong>Not:</strong> NuxtJs uygulaması oluşturma adımlarını hızlıca geçiyor olacağım. NuxtJs kurulum sayfasından detaylı bilgi edinilebilir. Buradaki asıl amacım bunun Github Actions ile nasıl deploy edildiğidir.</p></blockquote><p>NuxtJs takımının bize sunmuş olduğu scaffolding tool ile uygulamamızı oluşturalım.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-nuxt-app nuxt-github-actions-surge</span><br></pre></td></tr></table></figure><p>Github hesabımızda yeni bir depo oluşturalım ve kodumuzu oraya gönderelim. NuxtJs uygulamasının ana dizininde aşağıdaki komutları çalıştırıyoruz.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#Uygulamada değişiklik yaptıysanız bunları index'e ekliyoruz.</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#Değişiklikleri yerel depodaki HEAD'e ediyoruz</span></span><br><span class="line">git commit -m <span class="hljs-string">'init'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#Depomuza uzak sunucu adresi ekliyoruz</span></span><br><span class="line">git remote add origin https://github.com/username/repo-name.git</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#Değişiklikleri sunucudaki master dalımıza gönderiyoruz</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>Artık kodlarımız Github depomuza gittiğine göre askiyona başlayalım. :)</p><h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a><strong>Github Actions</strong></h2><p>Artık bit git deposu ve içerisinde bir nuxtjs uygulamamız bulunuyor. Bizim bunu surge.sh tarafına göndermekte dahil olmak üzere yapmamız gereken bir işlemler dizisi bulunuyor. İşte bu işlemler dizisine workflow yani iş akışı diyoruz. O zaman bir tane de kendi depomuz için oluşturalım.</p><p><img src="https://miro.medium.com/max/1767/1*ZPoAes6KWTvpj1sKL_Qtww.png" alt="İş akışı oluşturma ilk adım"></p><p>“Set up a workflow yourself” butonuna tıklayarak yeni bir iş akışı ayarlamaya başlayalım. Bizi ikinci adımda aşağıdaki ekran karşılayacak.</p><p><img src="https://miro.medium.com/max/1907/1*DPy8zf57x-s3QALfRbTIJA.png" alt="İş akışı tanımlama"></p><p>Kırmızı içerisine aldığım bölüm iş akışı tanımını yapacağımız düzenleyici. Şimdi o bölümü aşağıdaki bölüm ile değiştirelim.</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Website</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">on:</span> <span class="hljs-string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">jobs:</span></span><br><span class="line"><span class="hljs-attr">  build:</span></span><br><span class="line"><span class="hljs-attr">    runs-on:</span> <span class="hljs-string">ubuntu-latest</span></span><br><span class="line"><span class="hljs-attr">    name:</span> <span class="hljs-string">Deploying</span> <span class="hljs-string">to</span> <span class="hljs-string">surge</span></span><br><span class="line"><span class="hljs-attr">    steps:</span></span><br><span class="line"><span class="hljs-attr">      - uses:</span> <span class="hljs-string">actions/checkout@v1</span></span><br><span class="line"><span class="hljs-attr">      - name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">surge</span> <span class="hljs-string">and</span> <span class="hljs-string">fire</span> <span class="hljs-string">deployment</span></span><br><span class="line"><span class="hljs-attr">        uses:</span> <span class="hljs-string">actions/setup-node@v1</span></span><br><span class="line"><span class="hljs-attr">        with:</span></span><br><span class="line"><span class="hljs-attr">          node-version:</span> <span class="hljs-number">8</span></span><br><span class="line"><span class="hljs-attr">      - run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-bullet">-g</span> <span class="hljs-string">surge</span></span><br><span class="line"><span class="hljs-attr">      - run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span></span><br><span class="line"><span class="hljs-attr">      - run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">generate</span></span><br><span class="line"><span class="hljs-attr">      - run:</span> <span class="hljs-string">surge</span> <span class="hljs-string">./dist/</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SURGE_DOMAIN</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-bullet">--token</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SURGE_TOKEN</span> <span class="hljs-string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>1.satırdaki name bizim iş akış adımız. 3. satırda yer alan bölüm ise bu aksiyon ne zaman devreye gireceği. Biz burada depoya bir push işlemi olduğunda çalışacak şekilde ayarladık. 5. satırda işlerimizi tanımlayacağımızı 6. satırda ise bu işlerden birinin build olacağını 7. satırda bu build işleminin ubuntu’nun son sürümü üzerinde çalışacağını 8. satırda build işleminin adının ne olacağını belirttik. 9. satırda ise adımlarının ne olacağını 10. satırda actions/checkout@v1 kullanılarak deponun elde edileceğini 11. satırda yeni bir adım isim tanımı yapıldı. 12. satırda actions/setup-node@v1 kullanılarak nodejs yapılandırıldı ve 14. satırda hangi sürüm olacağı belirtildi. 15. satır surge cli’ının iş akışımızı çalıştıracak olan ubuntu üzerine kurmayı 16. satır nuxtjs uygulamamızın paketlerini kurmayı 17. satır ise nuxt uygulamamızı deploy etmeye hazır hale getirip ana dizinde dist klasörüne yerleştirmemizi sağlıyor.</p><p>Peki gelelim 18. satıra. Aslında diğer run komutlarından hiçbir farkı bulunmuyor. Temelde aslında surge cli ile belirli bir klasörü (./dist/) belirleyeceğimiz(uygun olduğundan emin olmalıyız) domaine almış olduğumuz token ile yayınlamayı sağlıyor diyor ve geçiyor olacaktım. Ama orada farklı olan birşey var. <strong>\$</strong> ve <strong>\$</strong></p><p>Bunlar Github Actions içerisinde kullanacağımız ama halka açmamamız gereken alanlar. O zaman nereden tanımlanıyor gelin ona bir bakalım.</p><p><img src="https://miro.medium.com/max/1332/1*pW6dH9rC5UZc_mK2arTAnw.png" alt="İş akışı secret tanımlama"></p><p>Secret alanları tanımlama<br>Yukarıdan resimden takip ederek buraya ulaşabilirsiniz. Çok basit bir anahtar-değer ikilisi şeklinde gizli verilerimizi tutmamıza yardımcı oluyor. Daha sonra ise iş akışı dosyamızda bunlara <strong>\$</strong> şeklinde erişebiliyoruz. İhtiyacımız olan iki sırrı :) buraya tanımlayalım.</p><blockquote><p><strong>Not:</strong> SURGE_DOMAIN için örneğin benim-ornek-nuxt-appim.surge.sh gibi olabildiğince benzersiz bir değer vermeye çalışın. O alan adı boşta değilse hata almamız kaçınılmaz.</p></blockquote><p>Artık bu depoya bir push yapıldığında bu iş akışı devreye girecek ve uygulamamız surge.sh’a gönderilecek.</p><p><img src="https://miro.medium.com/max/1916/1*Ji6CWv_3w5F45wZ06oUj2g.png" alt="İş akışı çalışması"></p><h2 id="Bitirirken"><a href="#Bitirirken" class="headerlink" title="Bitirirken"></a><strong>Bitirirken</strong></h2><p>NuxtJs özelinde bir uygulamanın Github Actions ile Surge.sh’a nasıl deploy edilebileceğini dilim döndüğünce anlatmaya çalıştım. Bu süreçleri kurgulamak oldukça keyiflidir. Umarım sizde deneyimlerken ve okurken keyif alırsınız. İyi çalışmalar diliyorum.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1000/1*PL9rzQIpoQZ-tJog9CbOxg.png&quot; alt=&quot;Giris Resmi&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github Actions duyurulduğunda hemen kayıt oldum ve heyecanla beklemeye başladım. Hesabım için aktif olduğunda ise bir deneme fırsatı bulamadım. Bugün temel anlamda basit bir nuxtjs uygulaması nasıl deploy ediliyor diye baktım. Burada örneği nuxtjs ile yapıyor olmamın aslında hiçbir önemi bulunmuyor. Bugün nuxtjs ile bir PoC yapıyordum ve bunu Github Actions ile nasıl deploy edebilirim dedim ve başladım. O zaman adım adım ne yapıyoruz birlikte inceleyelim.&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://selcukkutuk.com/kategoriler/DevOps/"/>
    
    
      <category term="nuxtjs" scheme="https://selcukkutuk.com/etiketler/nuxtjs/"/>
    
      <category term="githubactions" scheme="https://selcukkutuk.com/etiketler/githubactions/"/>
    
      <category term="surgesh" scheme="https://selcukkutuk.com/etiketler/surgesh/"/>
    
  </entry>
  
  <entry>
    <title>VueJs ile Axios Kullanımı</title>
    <link href="https://selcukkutuk.com/vuejs-ile-axios-kullanimi/"/>
    <id>https://selcukkutuk.com/vuejs-ile-axios-kullanimi/</id>
    <published>2019-12-01T06:21:14.000Z</published>
    <updated>2019-12-15T21:12:15.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1000/1*nLHZ75RCadRtigFj2beCrA.png" alt="Giriş Logosu"></p><p>Çok az sayıda framework/library yerleşik bir http API’si bulundurur. Örneğin AngularJs ile birlikte <strong>\$http</strong>, Angular 2+ da ise <strong>HttpModule</strong> ve <strong>HttpClientModule</strong> (HttpModule Angular 9 ile tamamen kaldırılacak.), JQuery tarafında ise <strong>\$.ajax</strong> yerleşik olarak bulunuyordu. VueJs 2.0’a kadar ise benzer şekilde <strong>vue-resource</strong> ile işlemlerimizi yerleşik olarak yapabiliyorduk. Fakat VueJs ekibi bunun VueJs 2.0 ile birlikte ayrılması gerektiğine ve 3. parti kütüphanelerin buna daha iyi hizmet edebileceğine karar verdiler. Bunun için en çok önerilen ise <strong>Axios</strong>‘tur.</p><a id="more"></a><p>Axios ile http işlemlerinizi çok basit ve etkili bir şekilde çözebilirsiniz. Varsayılan olarak Promise kullanır. Hem istemcide hemde sunucuda çalışır (SSR için uygun). VueJs ile kullanımı da oldukça basittir. Aynı zamanda async/await ile birlikte tertemiz bir kullanım sağlar. O zaman kurulum ile başlayalım incelemeye.</p><blockquote><p><strong>Not:</strong> VueJs uygulamasının zaten olduğu varsayılmıştır.</p></blockquote><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#Yarn</span></span><br><span class="line">$ yarn add axios</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#NPM</span></span><br><span class="line">npm i axios</span><br></pre></td></tr></table></figure><p>Kurulum tamamlandıktan sonra en temel iki metot olan GET ve POST olaylarını inceleyelim. Uygulamada API olarak <a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">jsonplaceholder</a> kullanılmıştır.</p><h3 id="axios-get"><a href="#axios-get" class="headerlink" title="axios.get()"></a><strong>axios.get()</strong></h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"axios-get"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"post of posts"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"post.id"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"errors &amp;&amp; errors.length"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(error, index) of errors"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span></span><br><span class="line">        &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; error.message &#125;&#125;</span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    created() &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.getPosts();</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    data() &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">        posts: [],</span></span><br><span class="line"><span class="hljs-undefined">        errors: []</span></span><br><span class="line"><span class="hljs-undefined">      &#125;;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">      getPosts() &#123;</span></span><br><span class="line"><span class="hljs-undefined">        axios</span></span><br><span class="line"><span class="hljs-javascript">          .get(<span class="hljs-string">"https://jsonplaceholder.typicode.com/posts"</span>)</span></span><br><span class="line"><span class="hljs-javascript">          .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> (<span class="hljs-keyword">this</span>.posts = response.data))</span></span><br><span class="line"><span class="hljs-javascript">          .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">this</span>.errors.push(error);</span></span><br><span class="line"><span class="hljs-undefined">          &#125;);</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="axios-post"><a href="#axios-post" class="headerlink" title="axios.post()"></a><strong>axios.post()</strong></h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"axios-post"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">"sendNewPost"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"title"</span>&gt;</span>Başlık:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"newPost.title"</span> /&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"inProgress"</span>&gt;</span>Kaydet<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"sendNewPostResult"</span>&gt;</span></span><br><span class="line">      Oluşan Post</span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&#123;&#123; sendNewPostResult &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"errors &amp;&amp; errors.length"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(error, index) of errors"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span></span><br><span class="line">        &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; error.message &#125;&#125;</span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    data() &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">        inProgress: <span class="hljs-literal">false</span>,</span></span><br><span class="line"><span class="hljs-undefined">        errors: [],</span></span><br><span class="line"><span class="hljs-undefined">        newPost: &#123;</span></span><br><span class="line"><span class="hljs-javascript">          title: <span class="hljs-string">""</span></span></span><br><span class="line"><span class="hljs-undefined">        &#125;,</span></span><br><span class="line"><span class="hljs-javascript">        sendNewPostResult: <span class="hljs-literal">null</span></span></span><br><span class="line"><span class="hljs-undefined">      &#125;;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">      sendNewPost() &#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">this</span>.inProgress = <span class="hljs-literal">true</span>;</span></span><br><span class="line"><span class="hljs-undefined">        axios</span></span><br><span class="line"><span class="hljs-javascript">          .post(<span class="hljs-string">"https://jsonplaceholder.typicode.com/posts"</span>, <span class="hljs-keyword">this</span>.newPost)</span></span><br><span class="line"><span class="hljs-javascript">          .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> (<span class="hljs-keyword">this</span>.sendNewPostResult = response.data))</span></span><br><span class="line"><span class="hljs-javascript">          .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">this</span>.errors.push(error);</span></span><br><span class="line"><span class="hljs-undefined">          &#125;)</span></span><br><span class="line"><span class="hljs-javascript">          .finally(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (<span class="hljs-keyword">this</span>.inProgress = <span class="hljs-literal">false</span>));</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Axios-async-await-kullanma"><a href="#Axios-async-await-kullanma" class="headerlink" title="Axios async/await kullanma"></a><strong>Axios async/await kullanma</strong></h3><p>Axios <strong>Promise</strong> kullandığı için await anahtarı ile sonucunu bekletebiliriz. Aşağıda daha önce yaptığımız get örneğini async/await ile birlikte nasıl kullanabileceğimizi göstermeye çalıştım. Burada unutulmaması gereken <strong>await</strong> anahtarı kullanılabilmesi için metodun <strong>async</strong> anahtarı ile işaretlenmiş olması.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"axios-get"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"post of posts"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"post.id"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"errors &amp;&amp; errors.length"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(error, index) of errors"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span></span><br><span class="line">        &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; error.message &#125;&#125;</span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> created() &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.getPostsAsync();</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    data() &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">        posts: [],</span></span><br><span class="line"><span class="hljs-undefined">        errors: []</span></span><br><span class="line"><span class="hljs-undefined">      &#125;;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    methods: &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">async</span> getPostsAsync() &#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">try</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.get(</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-string">"https://jsonplaceholder.typicode.com/posts"</span></span></span><br><span class="line"><span class="hljs-undefined">          );</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.posts = response.data;</span></span><br><span class="line"><span class="hljs-javascript">        &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.errors.push(error);</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Axios’u-Global-olarak-kullanma"><a href="#Axios’u-Global-olarak-kullanma" class="headerlink" title="Axios’u Global olarak kullanma"></a><strong>Axios’u Global olarak kullanma</strong></h3><p>Axios’u global olarak etkili bir şekilde kullanmak için Vue örneğinin prototype’ine yeni bir property tanımlayacağız. Bunu farklı şekillerde yapabilsekte kafa karışmaması adına main.js içerisinde direkt olarak yapacağız.</p><blockquote><p><strong>Not:</strong> Daha temiz görünmesi için ayrı bir script dosyasında yapılandırabilir ve main.js içerisinden import edebilirdik.</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="hljs-string">"https://jsonplaceholder.typicode.com/"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axiosInstance;</span><br></pre></td></tr></table></figure><p>Bu yapılandırmadan sonra artık axios’a bileşenlerimizden <strong>this.\$axios</strong> ile ulaşabileceğiz. Aşağıdaki örneği inceleyelim.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"axios-global"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"post of posts"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"post.id"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"errors &amp;&amp; errors.length"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(error, index) of errors"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span></span><br><span class="line">        &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; error.message &#125;&#125;</span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> created() &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.getPostsAsync();</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    data() &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">        posts: [],</span></span><br><span class="line"><span class="hljs-undefined">        errors: []</span></span><br><span class="line"><span class="hljs-undefined">      &#125;;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    methods: &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">async</span> getPostsAsync() &#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">try</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.$axios.get(<span class="hljs-string">"/posts"</span>);</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.posts = response.data;</span></span><br><span class="line"><span class="hljs-javascript">        &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.errors.push(error);</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Global-olarak-kullanma-typescript-detayi"><a href="#Global-olarak-kullanma-typescript-detayi" class="headerlink" title="Global olarak kullanma typescript detayı"></a>Global olarak kullanma typescript detayı</h4><p>Eğer VueJs uygulamanızı typescript ile geliştiriyorsanız bu küçük kod ile global olarak kullanırken vscode gibi editörler için intellisense desteği ekleyebilirsiniz. src klasörü altında <strong>shims-axios.d.ts</strong> adı ile bir dosya oluşturun ve aşağıdaki kod parçasını içerisine ekleyin.</p><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; AxiosInstance &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">module</span> "vue/types/vue" &#123;</span><br><span class="line">  <span class="hljs-keyword">interface</span> Vue &#123;</span><br><span class="line">    $axios: AxiosInstance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Axios-request-response-interceptor"><a href="#Axios-request-response-interceptor" class="headerlink" title="Axios request/response interceptor"></a><strong>Axios request/response interceptor</strong></h3><p>Interceptor araya giren anlamında bir kelime. Peki bu ne anlama geliyor. Bir http isteği oluşturulduğunda sunucuya gitmeden önce yada istek sonucu döndükten hemen sonra merkezi bir noktada son bir dokunuş yapmamız gerekebilir. Ben çok ihtiyaç duyulan iki örnek ile bunu anlatmaya çalışacağım.</p><h4 id="Request-Interceptor"><a href="#Request-Interceptor" class="headerlink" title="Request Interceptor"></a><strong>Request Interceptor</strong></h4><p>Bir istek yapacaksınız ama istek sunucuya gitmeden hemen önce header’a <strong>Authorization</strong> bilgisi eklemek istiyorsunuz. Request interceptor bunun için biçilmiş kaftandır.Örneği inceleyelim.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="hljs-string">"https://jsonplaceholder.typicode.com/"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axiosInstance;</span><br><span class="line"></span><br><span class="line">axiosInstance.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">//Tabiki burada token değerini local yada session storage gibi bir yerden okumamız gerekebilir</span></span><br><span class="line">  config.headers[<span class="hljs-string">"Authorization"</span>] = <span class="hljs-string">"Bearer eyxxxx"</span>;</span><br><span class="line">  <span class="hljs-keyword">return</span> config;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Artık tüm isteklerin header’ına bu değer ekleniyor olacak.</p><h4 id="Response-Interceptor"><a href="#Response-Interceptor" class="headerlink" title="Response Interceptor"></a><strong>Response Interceptor</strong></h4><p>Buradaki örneğimizde ise mesela sunucudan cevap döndüğünde eğer bir hata var ise bir toast mesajı göstermek isteyebilirsiniz. Diğer bir örnek ise istek sonucunda 401 hata kodu aldığımızda token’ı yenilemek yada kullanıcıyı giriş sayfasına yönlendirmek isteyebiliriz. Çözüm işte tam burası.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="hljs-string">"https://jsonplaceholder.typicode.com/"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axiosInstance;</span><br><span class="line"></span><br><span class="line">axiosInstance.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (config.status === <span class="hljs-number">401</span>) &#123;</span><br><span class="line">    alert(<span class="hljs-string">"Oturum süreniz sona erdi"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> config;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Bitirirken"><a href="#Bitirirken" class="headerlink" title="Bitirirken"></a><strong>Bitirirken</strong></h3><p>Bu yazı ile vue ile axios kütüphanesinin en sık ihtiyaç duyulan bölümlerini ele almaya çalıştım. Gerçekten çok başarılı bir kütüphane olduğunu belirtmekte fayda var. Tüm yapılandırma seçeneklerini incelemek için github deposunu ziyaret etmekte fayda var. Herkese iyi çalışmalar dilerim.</p><h4 id="Ornek-Github-Adresi-https-github-com-selcukkutuk-vue-axios-examples"><a href="#Ornek-Github-Adresi-https-github-com-selcukkutuk-vue-axios-examples" class="headerlink" title="Örnek Github Adresi: https://github.com/selcukkutuk/vue-axios-examples"></a><strong>Örnek Github Adresi:</strong> <a href="https://github.com/selcukkutuk/vue-axios-examples" target="_blank" rel="noopener">https://github.com/selcukkutuk/vue-axios-examples</a></h4><h3 id="Kaynaklar"><a href="#Kaynaklar" class="headerlink" title="Kaynaklar"></a><strong>Kaynaklar</strong></h3><ol><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></li><li><a href="https://alligator.io/vuejs/rest-api-axios/" target="_blank" rel="noopener">https://alligator.io/vuejs/rest-api-axios/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*nLHZ75RCadRtigFj2beCrA.png&quot; alt=&quot;Giriş Logosu&quot;&gt;&lt;/p&gt;
&lt;p&gt;Çok az sayıda framework/library yerleşik bir http API’si bulundurur. Örneğin AngularJs ile birlikte &lt;strong&gt;\$http&lt;/strong&gt;, Angular 2+ da ise &lt;strong&gt;HttpModule&lt;/strong&gt; ve &lt;strong&gt;HttpClientModule&lt;/strong&gt; (HttpModule Angular 9 ile tamamen kaldırılacak.), JQuery tarafında ise &lt;strong&gt;\$.ajax&lt;/strong&gt; yerleşik olarak bulunuyordu. VueJs 2.0’a kadar ise benzer şekilde &lt;strong&gt;vue-resource&lt;/strong&gt; ile işlemlerimizi yerleşik olarak yapabiliyorduk. Fakat VueJs ekibi bunun VueJs 2.0 ile birlikte ayrılması gerektiğine ve 3. parti kütüphanelerin buna daha iyi hizmet edebileceğine karar verdiler. Bunun için en çok önerilen ise &lt;strong&gt;Axios&lt;/strong&gt;‘tur.&lt;/p&gt;
    
    </summary>
    
      <category term="VueJs" scheme="https://selcukkutuk.com/kategoriler/VueJs/"/>
    
    
      <category term="vuejs" scheme="https://selcukkutuk.com/etiketler/vuejs/"/>
    
      <category term="axios" scheme="https://selcukkutuk.com/etiketler/axios/"/>
    
      <category term="interceptor" scheme="https://selcukkutuk.com/etiketler/interceptor/"/>
    
  </entry>
  
  <entry>
    <title>Stencil Bileşen Yaşam Döngüsü</title>
    <link href="https://selcukkutuk.com/stencil-bilesen-yasam-dongusu/"/>
    <id>https://selcukkutuk.com/stencil-bilesen-yasam-dongusu/</id>
    <published>2019-11-24T09:29:56.000Z</published>
    <updated>2019-12-15T21:12:15.686Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1000/1*ez1jFYb1jnH0xU3xAaQ7zg.png" alt="Giriş Logosu"></p><h2 id="Giris"><a href="#Giris" class="headerlink" title="Giriş"></a><strong>Giriş</strong></h2><p>Yaşam döngüsü her framework yada library de olduğu gibi Stenciljs’de de önem arz etmektedir. Bir bileşenin yaşam döngüsünü iyi bilmeliyiz ki herhangi bir t anında bileşene müdahale etmek gerekirse bunu nerede yapabileceğimizi kestirebilelim. Aşağıda çağrılma sıralarını dikkate almadan açıklamaya çalışacağım. Sonraki başlıkta ise farklı senaryolarda tam olarak hangi sıra ile çalıştıklarını belirtiyor olacağım. O zaman başlayalım.</p><a id="more"></a><h3 id="connectedCallback"><a href="#connectedCallback" class="headerlink" title="connectedCallback()"></a><strong>connectedCallback()</strong></h3><p>Bu metot bileşen DOM’a her bağlandığında çalıştırılır. Bileşenin DOM’a her bağlandığında yapmasını istediğimiz işlemler burada yer alabilir.</p><p><strong>Not:</strong> Bileşen DOM’a ilk bağlandığında <strong>connectedCallback()</strong> metodu <strong>componentWillLoad()</strong> metodundan önce çağrılır. Uygulamada bir bileşenin çok kez DOM’a eklenebileceğini yada kaldırılabileceğini dolayısıyla bu metodun defalarca kez çağrılabileceğini unutmamak gerekir.</p><h3 id="disconnectedCallback"><a href="#disconnectedCallback" class="headerlink" title="disconnectedCallback()"></a><strong>disconnectedCallback()</strong></h3><p>Bu metot bileşenin DOM ile bağlantısı her kesildiğinde çağrılır. <strong>connectedCallback()</strong> metodunda olduğu gibi bir çok kez çağrılabileceğini unutmamak gerekir.</p><h3 id="componentWillLoad"><a href="#componentWillLoad" class="headerlink" title="componentWillLoad()"></a><strong>componentWillLoad()</strong></h3><p>Bileşen DOM’a ilk kez bağlandıktan hemen sonra çağrılır. Burada geriye bir <strong>Promise</strong> return edilerek ilk render işlemi bekletilebilir. Özellikle bileşenin oluşturulması için bir API’ye istek yapılması gerekiyorsa, işlem burada gerçekleştirilebilir.</p><h3 id="componentDidLoad"><a href="#componentDidLoad" class="headerlink" title="componentDidLoad()"></a><strong>componentDidLoad()</strong></h3><p>Bileşen DOM’a tam olarak yüklendikten ve render işlemi tamamlandıktan sonra bir kez çağrılır.</p><h3 id="componentWillRender"><a href="#componentWillRender" class="headerlink" title="componentWillRender()"></a><strong>componentWillRender()</strong></h3><p>Her render işlemi öncesinde çağrılır. <strong>componentWillLoad()</strong> metodunda olduğu gibi geriye bir <strong>Promise</strong> return ederek render işlemi bekletilebilir.</p><h3 id="componentDidRender"><a href="#componentDidRender" class="headerlink" title="componentDidRender()"></a><strong>componentDidRender()</strong></h3><p>Her render işlemi sonrasında çağrılır.</p><h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a><strong>componentWillUpdate()</strong></h3><p>Prop() veya State() değerleri değiştiğinde bileşen güncellenmeden hemen önce çağrılır. <strong>componentWillLoad()</strong> metodunda olduğu gibi geriye bir <strong>Promise</strong> return ederek render işlemi bekletilebilir.</p><p><strong>Not:</strong> Bileşen DOM’a ilk kez eklendiğinde bu metot çağrılmaz.</p><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a><strong>componentDidUpdate()</strong></h3><p>Bileşen güncellendikten hemen sonra çağrılır.</p><p><strong>Not:</strong> Bileşen DOM’a ilk kez eklendiğinde bu metot çağrılmaz.</p><h3 id="componentDidUnload"><a href="#componentDidUnload" class="headerlink" title="componentDidUnload()"></a><strong>componentDidUnload()</strong></h3><p>Bu metot bileşen DOM’dan kaldırıldığında çağrılır. Bileşen oluştuğunda örneğin <strong>setInterval</strong> ile bir timer oluşturduysanız bu metotda clearInterval ile gereksiz çalışmasına (bellek tüketmesine/sürpriz sonuçlar oluşturmasına) engel olabilirsiniz.</p><h2 id="Farkli-Senaryolarda-Metotlarin-Calistirilma-Sirasi"><a href="#Farkli-Senaryolarda-Metotlarin-Calistirilma-Sirasi" class="headerlink" title="Farklı Senaryolarda Metotların Çalıştırılma Sırası"></a><strong>Farklı Senaryolarda Metotların Çalıştırılma Sırası</strong></h2><p>Diyelim bileşeniniz bütün yöntemleri içeriyor olsun. Bu bileşeni DOM’a eklediğinizde, DOM’dan kaldırdığınızda ve tekrar DOM’a eklediğinizde nasıl br sıralama oluyor aşağıdan inceleyelim.</p><h3 id="Bilesen-DOM’a-Ilk-Eklendiginde"><a href="#Bilesen-DOM’a-Ilk-Eklendiginde" class="headerlink" title="Bileşen DOM’a İlk Eklendiğinde"></a><strong>Bileşen DOM’a İlk Eklendiğinde</strong></h3><ol><li>connectedCallback()</li><li>componentWillLoad()</li><li>componentWillRender()</li><li>componentDidRender()</li><li>componentDidLoad()</li></ol><h3 id="Bilesen-DOM’dan-Kaldirildiginda"><a href="#Bilesen-DOM’dan-Kaldirildiginda" class="headerlink" title="Bileşen DOM’dan Kaldırıldığında"></a><strong>Bileşen DOM’dan Kaldırıldığında</strong></h3><ol><li>disconnectedCallback()</li><li>componentDidUnload()</li></ol><h3 id="Bilesen-DOM’a-Ikinci-Kez-Eklendiginde"><a href="#Bilesen-DOM’a-Ikinci-Kez-Eklendiginde" class="headerlink" title="Bileşen DOM’a İkinci Kez Eklendiğinde"></a><strong>Bileşen DOM’a İkinci Kez Eklendiğinde</strong></h3><ol><li>connectedCallback()</li></ol><h3 id="Bilesende-Guncelleme-Oldugunda"><a href="#Bilesende-Guncelleme-Oldugunda" class="headerlink" title="Bileşende Güncelleme Olduğunda"></a><strong>Bileşende Güncelleme Olduğunda</strong></h3><ol><li>componentWillUpdate()</li><li>componentWillRender()</li><li>componentDidRender()</li><li>componentDidUpdate()</li></ol><h2 id="Ic-Ice-Bilesenlerde-Yasam-Dongusu"><a href="#Ic-Ice-Bilesenlerde-Yasam-Dongusu" class="headerlink" title="İç İçe Bileşenlerde Yaşam Döngüsü"></a>İç İçe Bileşenlerde Yaşam Döngüsü</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bilesen-a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">bilesen-b</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">bilesen-c</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bilesen-c</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">bilesen-b</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">bilesen-a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>İç içe bileşen kullanımında ise aşağıdaki gibi bir sıra ile metotlar çağırılmaktadır.</p><ol><li><span style="color:#2BD9FE">bilesen-a-componentWillLoad()</span></li><li><span style="color:#2BD9FE">bilesen-a-componentWillRender()</span></li><li><span style="color:#52AA5E">bilesen-b-componentWillLoad()</span></li><li><span style="color:#52AA5E">bilesen-b-componentWillRender()</span></li><li><span style="color:#985F99">bilesen-c-componentWillLoad()</span></li><li><span style="color:#985F99">bilesen-c-componentWillRender()</span></li><li><span style="color:#985F99">bilesen-c-componentDidRender()</span></li><li><span style="color:#985F99">bilesen-c-componentDidLoad()</span></li><li><span style="color:#52AA5E">bilesen-b-componentDidRender()</span></li><li><span style="color:#52AA5E">bilesen-b-componentDidLoad()</span></li><li><span style="color:#2BD9FE">bilesen-a-componentDidRender()</span></li><li><span style="color:#2BD9FE">bilesen-a-componentDidLoad()</span></li></ol><blockquote><p><strong>Not:</strong> Bazı bileşenler önceden yüklenmiş olsada metot çağırma sırası yine yukarıdaki gibi olmaktadır.</p></blockquote><h2 id="Zaman-Uyumsuz-Yasam-Dongusu-Metotlari"><a href="#Zaman-Uyumsuz-Yasam-Dongusu-Metotlari" class="headerlink" title="Zaman Uyumsuz Yaşam Döngüsü Metotları"></a>Zaman Uyumsuz Yaşam Döngüsü Metotları</h2><p>Yazının bazı bölümlerinde <strong>componentWillLoad()</strong> ve bazı diğer metotların geriye bir Promise return edebildiğinden bahsetmiştik. Şimdi bunu bir örnek ile daha iyi anlamaya çalışalım. Örneğin bileşen ilk kez render edilmeden önce bileşenin oluşumunda sunucudan gelen verilerin kullanılması gerekiyor. Aşağıdaki örneği inceleyelim.</p><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentWillLoad() &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> fetch(<span class="hljs-string">'https://jsonplaceholder.typicode.com/todos'</span>)</span><br><span class="line">    .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="hljs-function"><span class="hljs-params">todos</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.todos = todos;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bileşenin <strong>componentWillLoad()</strong> metodu geriye bir Promise return ediyor. Dolayısıyla istek sonuçlanana kadar bileşen render edilmeyecek.</p><h2 id="Bitirirken"><a href="#Bitirirken" class="headerlink" title="Bitirirken"></a>Bitirirken</h2><p>Bu yazı ile stenciljs için önemli bir konu olan yaşam döngüsü metotlarını incelemeye çalıştım. Bir sonraki yazıda görüşmek üzere.</p><h2 id="Kaynaklar"><a href="#Kaynaklar" class="headerlink" title="Kaynaklar"></a>Kaynaklar</h2><ol><li><a href="https://stenciljs.com/docs/component-lifecycle" target="_blank" rel="noopener">https://stenciljs.com/docs/component-lifecycle</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*ez1jFYb1jnH0xU3xAaQ7zg.png&quot; alt=&quot;Giriş Logosu&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Giris&quot;&gt;&lt;a href=&quot;#Giris&quot; class=&quot;headerlink&quot; title=&quot;Giriş&quot;&gt;&lt;/a&gt;&lt;strong&gt;Giriş&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Yaşam döngüsü her framework yada library de olduğu gibi Stenciljs’de de önem arz etmektedir. Bir bileşenin yaşam döngüsünü iyi bilmeliyiz ki herhangi bir t anında bileşene müdahale etmek gerekirse bunu nerede yapabileceğimizi kestirebilelim. Aşağıda çağrılma sıralarını dikkate almadan açıklamaya çalışacağım. Sonraki başlıkta ise farklı senaryolarda tam olarak hangi sıra ile çalıştıklarını belirtiyor olacağım. O zaman başlayalım.&lt;/p&gt;
    
    </summary>
    
      <category term="Web Components" scheme="https://selcukkutuk.com/kategoriler/Web-Components/"/>
    
    
      <category term="stenciljs" scheme="https://selcukkutuk.com/etiketler/stenciljs/"/>
    
      <category term="web components" scheme="https://selcukkutuk.com/etiketler/web-components/"/>
    
      <category term="lifecycle methods" scheme="https://selcukkutuk.com/etiketler/lifecycle-methods/"/>
    
  </entry>
  
  <entry>
    <title>Stencil’de Bileşenler Arası Haberleşme</title>
    <link href="https://selcukkutuk.com/stencilde-bilesenler-arasi-haberlesme/"/>
    <id>https://selcukkutuk.com/stencilde-bilesenler-arasi-haberlesme/</id>
    <published>2019-05-15T21:28:10.000Z</published>
    <updated>2019-12-15T21:12:15.689Z</updated>
    
    <content type="html"><![CDATA[<center><br><img src="https://cdn-images-1.medium.com/max/1000/1*JDAq9NYdpV5maeQ2jqzkyA.png" alt="Giriş Logosu"><br></center><p>Stencil aracının ne olduğuna <a href="https://selcukkutuk.com/2019/05/15/stencil-e-giris/">bir önceki yazımda</a> giriş seviyesinde değinmeye çalışmıştım. Şimdi biraz daha derinlerine inmeye çalışacağım. Bileşen temelli araçların hemen tümünde bileşenler arası haberleşme/etkileşim (component communication/interaction) önem arz eder. Bu nedenle değineceğim ilk konu bu olacak.</p><a id="more"></a><p>Stencil aracında bileşenler arasındaki haberleşme Üst Bileşenden Alt Bileşene (Parent to Child), Alt Bileşenden Üst Bileşene (Child to Parent) olmak üzere iki şekilde gerçekleşmektedir. Aşağıdaki hazırladığım görsel ile basit bir şekilde bu haberleşmeyi anlatmaya çalıştım.</p><center><br><img src="https://cdn-images-1.medium.com/max/800/1*VWfiCojQK8hEkpLrfyz2QQ.png" alt="Bileşenler arası heberleşme"><br></center><h3 id="Ust-Bilesen’den-Alt-Bilesene-Parent-to-Child"><a href="#Ust-Bilesen’den-Alt-Bilesene-Parent-to-Child" class="headerlink" title="Üst Bileşen’den Alt Bileşene (Parent to Child)"></a><strong>Üst Bileşen’den Alt Bileşene (Parent to Child)</strong></h3><p>Bileşenler arasındaki haberleşmenin en anlaşılır ve kolay olanıdır. Alt bileşen içerisinde bir <strong>@Prop()</strong> tanımlanır ve özellik olarak değer ataması yapılır. Basit bir örnek ile gösterecek olursak :</p><blockquote><p><strong>Not:</strong> Örnek dilini belki makaleyi yabancı okurlarda inceleyebilir diye affınıza sığınarak İngilizce tutmaya çalışacağım.</p></blockquote><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//*** profile-image.tsx</span></span><br><span class="line"><span class="hljs-meta">@Prop</span>() imageUrl: <span class="hljs-built_in">string</span> = <span class="hljs-string">''</span>;</span><br><span class="line">render()&#123;</span><br><span class="line"> <span class="hljs-keyword">return</span>(&lt;img src=&#123;<span class="hljs-keyword">this</span>.imageUrl&#125; alt=<span class="hljs-string">"My profile image"</span> /&gt;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//***</span></span><br></pre></td></tr></table></figure><p>Alt bileşenimiz de <strong>imgUrl</strong> adında bir özellik alabileceğimizi belirtiyoruz. Ve gelen veriyi img tagının src’sine aktarıyoruz. Daha sonra bu bileşeni kullanacak olan profile bileşenini düzenliyoruz:</p><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//*** profile.tsx</span></span><br><span class="line"><span class="hljs-meta">@State</span>() currentUser: <span class="hljs-built_in">any</span> = &#123;</span><br><span class="line">name:<span class="hljs-string">'Selçuk Kütük'</span>,</span><br><span class="line">image:<span class="hljs-string">'http://localhost:3333/img/profileimg.jpeg'</span></span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> (</span><br><span class="line"></span><br><span class="line">   &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Hello &#123;<span class="hljs-keyword">this</span>.currentUser.name&#125;&lt;<span class="hljs-regexp">/h3&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;hr /</span>&gt;</span><br><span class="line">    &lt;profile-image image-url=&#123;<span class="hljs-keyword">this</span>.currentUser.image&#125;&gt;&lt;<span class="hljs-regexp">/profile-image&gt;</span></span><br><span class="line"><span class="hljs-regexp"> )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-comment">/***</span></span><br></pre></td></tr></table></figure><p>Profile bileşenin içerisinde profile-image bileşenini kullanırken bu bileşenin image-url özelliğine profile bileşeninde bulunan currentUser nesnesinin image özelliğini gönderiyoruz.</p><blockquote><p><strong>Not:</strong> Süslü parantez (curly braces) “{}” JSX söz diziminde Javascript’e geçtiğinizi belirtmek için kullanılır. Böylece bileşen içerisinde yer alan bir değişkenin değerini bir html özelliğine aktarabiliriz.</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><center><br><img src="https://cdn-images-1.medium.com/max/800/1*zCALNRycUtO1q9wq163FVg.png" alt="Elde edilecek yaklaşık sonuç"><br></center><h3 id="Alt-Bilesen’den-Ust-Bilesene-Child-to-Parent"><a href="#Alt-Bilesen’den-Ust-Bilesene-Child-to-Parent" class="headerlink" title="Alt Bileşen’den Üst Bileşene (Child to Parent)"></a><strong>Alt Bileşen’den Üst Bileşene (Child to Parent)</strong></h3><p>Mantığı basit olmasına karşın anlaşılması ilk haberleşme şekline göre biraz daha zordur. Öncelikle sorunu bir tanımlayalım. Bu haberleşmede amiyane tabirle bileşen elimizin altında değil. Aksi gibi elimizin üstünde :). Bu nedenle Alt bileşende gerçekleşen bir <strong>olaydan haberdar olmak</strong> ve varsa gerçekleşen olayın sonucunda oluşan değeri de elde etmek istiyoruz. İşte tam burada 3 yeni kavram karşımıza çıkıyor. @Event() ve @Listen() dekarator’ü, EventEmitter arayüzü.</p><p><strong>@Event():</strong> Tanımlanacak değişkenin üst bileşenlere haber göndereceğini işaretlemeye yarayan dekarator. Örneğin, @Event() profileImageUpdated: EventEmitter;</p><p><strong>EventEmitter:</strong> Tanımlanan değişkenin tipini ifade eder. İçerisinde bulunan emit methodu ile Üst bileşenlere haber ve gerekirse veri gönderir. Örneğin, profImgUpd.emit(‘newprofileimg.jpeg’)</p><p><strong>@Listen():</strong> Üst bileşende işaretlenen method ile Alt bileşendeki gerçekleşen bir olaydan haberdar olunmasını sağlayan dekarator. Örneğin, @Listen(‘profileImageUpdated’) showInfo(event: CustomEvent){console.log(event.detail)}</p><p>O zaman ilk örneğimizi bu yeni konu ile genişletelim:</p><blockquote><p><strong>Not:</strong> Event, EventEmitter, Listen @stencil/core kütüphanesinde yer almaktadır. Dahil etmeyi unutmayın.</p></blockquote><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123;Event, EventEmitter, Listen&#125; <span class="hljs-keyword">from</span> ‘<span class="hljs-meta">@stencil</span>/core’;</span><br></pre></td></tr></table></figure><p>Şimdi profile-image bileşeninde ki işlemleri gerçekleştirelim.</p><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//*** profile-image.tsx</span></span><br><span class="line"><span class="hljs-meta">@Prop</span>() imageUrl: <span class="hljs-built_in">string</span> = <span class="hljs-string">''</span>;</span><br><span class="line"><span class="hljs-meta">@Event</span>() profileImageUpdated: EventEmitter;</span><br><span class="line">updateProfileImage()&#123;</span><br><span class="line"> <span class="hljs-keyword">let</span> newProfileImageUrl = <span class="hljs-string">'...'</span>;</span><br><span class="line"> <span class="hljs-keyword">this</span>.profileImageUpdated(newProfileImageUrl);</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"> <span class="hljs-keyword">return</span>(</span><br><span class="line">  &lt;button onClick=&#123;<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">this</span>.updateProfileImage()&#125;&gt;Update&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;img src=&#123;this.imageUrl&#125; alt="My profile image" /</span>&gt;</span><br><span class="line"> )</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//***</span></span><br></pre></td></tr></table></figure><p>Şimdi ise profile bileşeninde ki işlemleri gerçekleştirelim.</p><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//*** profile.tsx</span></span><br><span class="line"><span class="hljs-meta">@State</span>() currentUser: <span class="hljs-built_in">any</span> = &#123;</span><br><span class="line">  name:<span class="hljs-string">'Selçuk Kütük'</span>,</span><br><span class="line">  image:<span class="hljs-string">'http://localhost:3333/img/profileimg.jpeg'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@State</span>() newProfileUrl: <span class="hljs-built_in">string</span> = <span class="hljs-string">''</span>;</span><br><span class="line"><span class="hljs-meta">@Listen</span>(<span class="hljs-string">'profileImageUpdated'</span>)</span><br><span class="line"></span><br><span class="line">profileImageUpdatedHandler(event: CustomEvent)&#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.newProfileUrl = event.detail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.imageUrl !== <span class="hljs-string">''</span> &amp;&amp;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">        Profile image updated.</span><br><span class="line">        New image: &lt;img src=&#123;<span class="hljs-keyword">this</span>.newProfileUrl&#125; alt=<span class="hljs-string">"New image"</span> /&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;h3&gt;Hello &#123;this.currentUser.name&#125;&lt;/</span>h3&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;profile-image image-url=&#123;<span class="hljs-keyword">this</span>.currentUser.img&#125;&gt;&lt;<span class="hljs-regexp">/profile-image&gt;</span></span><br><span class="line"><span class="hljs-regexp">  )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-comment">/***</span></span><br></pre></td></tr></table></figure><p>Şimdi haberleşmenin keyfini çıkaralım.</p><center><br><img src="https://cdn-images-1.medium.com/max/800/1*EK7tA9bVlyHaGKAvcEjM3Q.gif" alt="Projenin bitmiş hali"><br></center><p>Stencil yazı dizisinin ikincisinde bileşenler arasındaki haberleşmeyi ele almaya çalıştım. Bir sonraki konuda görüşmek üzere. Herkese iyi çalışmalar dilerim.</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*JDAq9NYdpV5maeQ2jqzkyA.png&quot; alt=&quot;Giriş Logosu&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;Stencil aracının ne olduğuna &lt;a href=&quot;https://selcukkutuk.com/2019/05/15/stencil-e-giris/&quot;&gt;bir önceki yazımda&lt;/a&gt; giriş seviyesinde değinmeye çalışmıştım. Şimdi biraz daha derinlerine inmeye çalışacağım. Bileşen temelli araçların hemen tümünde bileşenler arası haberleşme/etkileşim (component communication/interaction) önem arz eder. Bu nedenle değineceğim ilk konu bu olacak.&lt;/p&gt;
    
    </summary>
    
      <category term="Web Components" scheme="https://selcukkutuk.com/kategoriler/Web-Components/"/>
    
    
      <category term="stenciljs" scheme="https://selcukkutuk.com/etiketler/stenciljs/"/>
    
      <category term="web components" scheme="https://selcukkutuk.com/etiketler/web-components/"/>
    
      <category term="bileşen iletişimi" scheme="https://selcukkutuk.com/etiketler/bilesen-iletisimi/"/>
    
  </entry>
  
  <entry>
    <title>Stencil&#39;e Giriş</title>
    <link href="https://selcukkutuk.com/stencil-e-giris/"/>
    <id>https://selcukkutuk.com/stencil-e-giris/</id>
    <published>2019-05-15T11:33:05.000Z</published>
    <updated>2019-12-15T21:12:15.688Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1000/1*KtY9DFv1P2mC5JDWrgdeOQ.png" alt="Giriş Logosu"></p><h3 id="Nedir"><a href="#Nedir" class="headerlink" title="Nedir?"></a><strong>Nedir?</strong></h3><p><a href="https://stenciljs.com" target="_blank" rel="noopener">Stencil</a> Ionic ekibi tarafından geliştirilen native web bileşenleri oluşturmak için hazırlanan bir araçtır. Bunun yanında sanal dom, reaktif veri aktarımı Typescript ve JSX gibi güçlü özellikleri ile uzun vade de oldukça iddialı ve umut verici görünüyor. İlk olarak <a href="https://www.youtube.com/watch?v=UfD-k7aHkQE" target="_blank" rel="noopener">Polymer Summit 2017</a> de duyurulan Stencil ben de dahil olmak üzere bir çok kişinin ilgisini çekmiş gibi görünüyor. Bu yazı ile kısa bir giriş yaparak basit bir örnek uygulama hazırlayacağız.</p><a id="more"></a><h3 id="Neden"><a href="#Neden" class="headerlink" title="Neden?"></a><strong>Neden?</strong></h3><p>Ekip Ionic bileşenlerinin bir sonraki sürümünü Stencil ile geliştirecek. Bu Ionic ile geliştirilmiş olan uygulamalara ciddi bir hız katacak ve aynı zamanda ciddi bir paket boyutu avantajı sağlayacak gibi görünüyor. Bunun yanı sıra Angular 4 ile Ionic uygulamarı geliştirmek hala mümkün olacak ve daha da önemlisi ve bana çok cazip gelen tarafı Angular 4 dışında Vue, React ve hatta saf Javascript ile ionic uygulamaları geliştirmek mümkün hale gelecek. Yani kısacası framework yada kütüphane bağımsız bir bileşen setine dönüşecek. Gerçekten kulağa çok hoş geliyor.</p><blockquote><p><strong>Dikkat:</strong> Stencil henüz alpha bile diyemeyeceğimiz çok ama çok erken bir sürümde. Bu nedenle ilk kararlı sürüm yayınlanana kadar dikkatli olunması ve değişimlerin iyi izlenmesi gerekmektedir. Çünkü bazı klavye bükücü anlamsız hatalar ve kararlı sürüme kadar bolca “breaking change” bizleri bekliyor olabilir.</p></blockquote><h3 id="Kurulum"><a href="#Kurulum" class="headerlink" title="Kurulum"></a><strong>Kurulum</strong></h3><p>Şu anda Stencil çok erken bir aşamada olduğu için bir cli aracı bulunmuyor. Bu nedenle hızlıca bir göz atmanın en iyi yolu ekip tarafından github üzerindeki başlangıç uygulaması reposunu bilgisayarımıza klonlamak (git clone)olacaktır. O zaman başlayalım:</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span> git clone https://github.com/ionic-team/stencil-starter.git ilk-stencil-ornegi</span><br></pre></td></tr></table></figure><p>Klonlama işlemi tamamlandıktan sonra bağımlılıklar için klasör içerisine girip <strong>npm</strong> yada <strong>yarn</strong> ile yükleme işlemini tamamlıyoruz.</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span> cd ilk-stencil-ornegi</span><br><span class="line"><span class="hljs-meta">$</span> npm install</span><br><span class="line"><span class="hljs-meta">#</span>veya yarn için</span><br><span class="line"><span class="hljs-meta">$</span> yarn</span><br></pre></td></tr></table></figure><p>Yükleme işlemi tamamlandıktan sonra projeyi yerel bir sunucu üzerinde ayağa kaldırmak için şu komutu çalıştırıyoruz:</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span> npm start</span><br><span class="line"><span class="hljs-meta">#</span> veya yarn için</span><br><span class="line"><span class="hljs-meta">$</span> yarn start</span><br></pre></td></tr></table></figure><center><br><img src="https://cdn-images-1.medium.com/max/800/1*esy1UK8XcT2giZ3CGhdV-w.png" alt="Açılış öncesi kısa bir build işlemi gerçekleşiyor."><br></center><center><br><img src="https://cdn-images-1.medium.com/max/800/1*0KoFL7uLIxPBLk36U1wZIg.png" alt="Build işlemi sonrasında uygulama yükleniyor."><br></center><h3 id="Hadi-Baslayalim"><a href="#Hadi-Baslayalim" class="headerlink" title="Hadi Başlayalım"></a><strong>Hadi Başlayalım</strong></h3><p>Stencil bileşenleri Typescript ve JSX kullanılarak oluşturuluyorlar. Bu hem Angular severlere hemde React severlere göz kırpıyor. Vue severler için zaten bir şey söylememe gerek yok. Kim gözünü nereye kırpsa sekip onlara geliyor. :) Bileşenler <strong>/src/components/</strong> klasöründe bulunuyor. Bir bileşenin yapısına kısaca bir göz atmak istersek (my-name.tsx):</p><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; Component, Prop &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"@stencil/core"</span>;</span><br><span class="line"><span class="hljs-meta">@Component</span>(&#123;</span><br><span class="line">  tag: <span class="hljs-string">"my-name"</span>,</span><br><span class="line">  styleUrl: <span class="hljs-string">"my-name.scss"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> MyName &#123;</span><br><span class="line">  <span class="hljs-meta">@Prop</span>() first: <span class="hljs-built_in">string</span>;</span><br><span class="line">  <span class="hljs-meta">@Prop</span>() last: <span class="hljs-built_in">string</span>;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Hello, my name is &#123;<span class="hljs-keyword">this</span>.first&#125; &#123;<span class="hljs-keyword">this</span>.last&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>@Component:</strong> Bileşen için gereken meta verilerin tanımlanması için kullanılan dekorator. Bazı özellikleri <strong>tag, styleUrl, styleUrls.</strong></p><p><strong>@Prop:</strong> Bileşenin kabul ettiği öz niteliklerin değerlerini ele alırken kullanılan dekorator. Örneğin <em>@Prop() adi: string = <code></code>;</em></p><p>Bu bileşenin Stencil yapılandırma dosyasında tanımlanması gerekmektedir. Kontrol etmek için ana dizinde bulunan <strong>stencil.config.js</strong> dosyasına göz atalım:</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.config = &#123;</span><br><span class="line">  bundles: [&#123; <span class="hljs-attr">components</span>: [<span class="hljs-string">"my-name"</span>, <span class="hljs-string">"diger-bilesen"</span>] &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">//...</span></span><br></pre></td></tr></table></figure><p>Artık bileşeni <strong>index.html</strong> içerisinde tag adı ile kullanabiliriz:</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">"ltr"</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Stencil Starter App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"build/app.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">my-name</span> <span class="hljs-attr">first</span>=<span class="hljs-string">"Stencil"</span> <span class="hljs-attr">last</span>=<span class="hljs-string">"JS"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-name</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Kendi-Bilesenimizi-Gelistirelim"><a href="#Kendi-Bilesenimizi-Gelistirelim" class="headerlink" title="Kendi Bileşenimizi Geliştirelim"></a><strong>Kendi Bileşenimizi Geliştirelim</strong></h3><p>Öncelikle bileşeni geliştirmeye başlamadan önce ilk kez kullanacağımız 3 yeni kavrama bir göz atalım.</p><p><strong>@State() :</strong> Bileşen içerisinde kullanacağımız değişkenleri belirttiğimiz dekarator. Örneğin, @State() deger: number;</p><p><strong>componentWillLoad :</strong> Yaşam döngüsü kancalarından bir tanesi. Bileşen yüklenmeden önce çalıştırılır. Diğerleri, componentDidLoad ve componentDidUnload. componentDidLoad, bileşen yüklendikten sonra componentDidUnload ise bileşen kaldırıldığında çalıştırılır.</p><p><strong>onClick :</strong> Buttona tıklama olayını ele alacağımız event. Örneğin, onClick={() =&gt; this.artir()}</p><p>Şimdi ilk olarak <strong>/src/components/</strong> dizinin içerisine ornek-sayac adında yeni bir bileşen dizini oluşturalım. Şimdi ise içerisine <strong>ornek-sayac.tsx</strong> ve <strong>ornek-sayac.scss</strong> dosyalarını oluşturalım. Son görünüm aşağıdaki gibi.</p><center><br><img src="https://cdn-images-1.medium.com/max/800/1*32A_5VSRz8lVpPdI-RSbKQ.png" alt="Dizin ağaç yapısı"><br></center><p>Daha sonra yeni bileşenimizi stencil’e haber vermemiz gerekiyor. Bunun için <strong>stencil.config.js</strong> içerisindeki components string dizisine yeni bileşenimizi ekleyelim.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.config = &#123;</span><br><span class="line">  bundles: [&#123; <span class="hljs-attr">components</span>: [<span class="hljs-string">"my-name"</span>, <span class="hljs-string">"ornek-sayac"</span>] &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">//...</span></span><br></pre></td></tr></table></figure><p>Şimdi <strong>ornek-sayac.tsx</strong> dosyasını açalım ve aşağıdaki şekilde düzenleyelim.</p><figure class="highlight ts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; Component, Prop, State &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"@stencil/core"</span>;</span><br><span class="line"><span class="hljs-meta">@Component</span>(&#123;</span><br><span class="line">  tag: <span class="hljs-string">"ornek-sayac"</span>,</span><br><span class="line">  styleUrl: <span class="hljs-string">"ornek-sayac.scss"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> OrnekSayac &#123;</span><br><span class="line">  <span class="hljs-meta">@Prop</span>() baslangic: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-meta">@Prop</span>() artismiktari: <span class="hljs-built_in">number</span> = <span class="hljs-number">5</span>;</span><br><span class="line">  <span class="hljs-meta">@State</span>() deger: <span class="hljs-built_in">number</span>;</span><br><span class="line">  componentWillLoad() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.deger = <span class="hljs-keyword">this</span>.baslangic;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">this</span>.azalt()&#125;&gt;Azalt&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;span class="sonuc"&gt;&#123;this.deger&#125;&lt;/</span>span&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">this</span>.artir()&#125;&gt;Artır&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>p&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  artir() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> yeniDeger = <span class="hljs-keyword">this</span>.deger + <span class="hljs-keyword">this</span>.artismiktari;</span><br><span class="line">    <span class="hljs-keyword">this</span>.deger = yeniDeger;</span><br><span class="line">  &#125;</span><br><span class="line">  azalt() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> yeniDeger = <span class="hljs-keyword">this</span>.deger - <span class="hljs-keyword">this</span>.artismiktari;</span><br><span class="line">    <span class="hljs-keyword">this</span>.deger = yeniDeger;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//...</span></span><br></pre></td></tr></table></figure><p>Şimdi ise isteğe bağlı <strong>olarak ornek-sayac.scss</strong> dosyasını aşağıdaki gibi düzenleyebilirsiniz.</p><figure class="highlight scss hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">button</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.sonuc</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ve bileşenimiz hazır durumda. Son olarak bileşeni <strong>index.html</strong>‘e eklemeliyiz.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">"ltr"</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Stencil Starter App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"build/app.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">my-name</span> <span class="hljs-attr">first</span>=<span class="hljs-string">"Stencil"</span> <span class="hljs-attr">last</span>=<span class="hljs-string">"JS"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ornek-sayac</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ornek-sayac</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- &lt;ornek-sayac baslangic="5" artismiktari="10"&gt;&lt;/ornek-sayac&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Sonuç aşağıdaki gibi olmalı.</p><center><br><img src="https://cdn-images-1.medium.com/max/1000/1*CnWsqOQhTgH8q1EsE6pxAw.gif" alt="Projenin son hali"><br></center><p>Bu yazı ile temel anlamda Stencil aracına bir giriş yapmış olduk. Yeni konularla bu yazı dizisini devam ettirmeye çalışacağım. Herkese iyi çalışmalar dilerim.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*KtY9DFv1P2mC5JDWrgdeOQ.png&quot; alt=&quot;Giriş Logosu&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Nedir&quot;&gt;&lt;a href=&quot;#Nedir&quot; class=&quot;headerlink&quot; title=&quot;Nedir?&quot;&gt;&lt;/a&gt;&lt;strong&gt;Nedir?&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://stenciljs.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stencil&lt;/a&gt; Ionic ekibi tarafından geliştirilen native web bileşenleri oluşturmak için hazırlanan bir araçtır. Bunun yanında sanal dom, reaktif veri aktarımı Typescript ve JSX gibi güçlü özellikleri ile uzun vade de oldukça iddialı ve umut verici görünüyor. İlk olarak &lt;a href=&quot;https://www.youtube.com/watch?v=UfD-k7aHkQE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Polymer Summit 2017&lt;/a&gt; de duyurulan Stencil ben de dahil olmak üzere bir çok kişinin ilgisini çekmiş gibi görünüyor. Bu yazı ile kısa bir giriş yaparak basit bir örnek uygulama hazırlayacağız.&lt;/p&gt;
    
    </summary>
    
      <category term="Web Components" scheme="https://selcukkutuk.com/kategoriler/Web-Components/"/>
    
    
      <category term="stenciljs" scheme="https://selcukkutuk.com/etiketler/stenciljs/"/>
    
      <category term="web components" scheme="https://selcukkutuk.com/etiketler/web-components/"/>
    
  </entry>
  
</feed>
